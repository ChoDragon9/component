!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";o.r(t);const n=()=>{},r=e=>t=>e,s=e=>(t=r({}))=>{const{beforeCreate:o=n}=e,s=d(e);let l=s(t);return o({render:i({dom:l,render:s,props:t}),props:t}),l},d=({data:e=r({}),template:t=n,components:o=r([]),methods:s=r([]),events:d=r([])})=>n=>{const r=e(),i=l(t({data:r,props:n}));return a(d(),s({dom:i,data:r,props:n}),i),c(o(),i,r),i},i=({dom:e,render:t,props:o})=>()=>{const n=t(o);e.replaceWith(n),e=n},l=e=>{var t=document.createElementNS("http://www.w3.org/2000/svg","svg");return t.innerHTML=e,t.children[0]},a=(e,t,o)=>{for(const[n,r,s]of e)u(n,o).forEach(e=>{e[r]=t[s]})},c=(e,t,o)=>{for(const[n,r]of e)u(n,t).forEach(e=>{i({dom:e,render:r,props:p(e,o)})()})},p=(e,t)=>{const o=g(e,"props");return o?t[o]?t[o]:o:{}},u=(e,t=document)=>t.querySelectorAll(e),g=(e,t)=>e.getAttribute(t),m=(e={})=>{const t=new Map,o=new Map,n=y({store:t,subscriber:o});return f({state:e,set:n}),{set:n,get:v({store:t}),watch:h({subscriber:o})}},f=({state:e,set:t})=>{Object.entries(e).forEach(([e,o])=>t(e,o))},y=({store:e,subscriber:t})=>(o,n)=>{e.set(o,n),b({subscriber:t,store:e,key:o})},b=({subscriber:e,key:t,store:o})=>{if(e.has(t))for(const n of e.get(t))n(o.get(t))},v=({store:e})=>t=>e.get(t),h=({subscriber:e})=>(t,o)=>{let n;(n=e.has(t)?e.get(t):[]).push(o),e.set(t,n)},k=m();k.set("todo",[{id:0,contents:"asdasdad"},{id:1,contents:"asdasdad"},{id:2,contents:"asdasdad"}]);const $=s({template(){const e=k.get("todo").reduce((e,{id:t,contents:o})=>`${e}<li data-id="${t}">\n        ${o} <button type="button">X</button>\n      </li>`,"");let t;return`<div>${t=e?`<ul>${e}</ul>`:"No Items"}</div>`},methods:()=>({removeItem(){const e=this.parentNode.getAttribute("data-id"),t=k.get("todo").filter(t=>t.id.toString()!==e);k.set("todo",t)}}),events:()=>[["li > button","onclick","removeItem"]],beforeCreate({render:e}){k.watch("todo",e)}}),w=s({template:()=>'<div>\n      <form>\n          <input type="text" placeholder="enter task">\n          <input type="submit" value="add">\n      </form>\n      -------\n      <todo-item></todo-item>\n      -------\n      <todo-item></todo-item>\n    </div>',events:()=>[["form","onsubmit","addItem"]],methods:({dom:e})=>({addItem(t){t.preventDefault();const o=e.querySelector('input[type="text"]'),n=k.get("todo").map(({contents:e},t)=>({id:t,contents:e}));n.push({id:n.length,contents:o.value}),k.set("todo",n),o.value=""}}),components:()=>[["todo-item",$]]}),x=m({coordinates:["coordinate0","coordinate1"],coordinate0:[[100,100],[100,400],[400,400],[400,100]],coordinate1:[[150,150],[150,450],[450,450],[450,150]],selectedPoint:{index:null,key:null},selectedPolygon:{key:null},prevCoordinate:null}),P=({x:e,y:t})=>{const{index:o,key:n}=x.get("selectedPoint"),r=x.get(n);r[o]=[e,t],x.set(n,r)},C=({x:e,y:t})=>{const o=x.get("prevCoordinate");if(null===o)x.set("prevCoordinate",[e,t]);else{const n=x.get("selectedPolygon").key,r=x.get(n),s=e-o[0],d=t-o[1],i=r.map(([e,t])=>[e+s,t+d]);x.set(n,i),x.set("prevCoordinate",[e,t])}},M=s({data:()=>({strokeWidth:5,stroke:"rgba(255, 102, 51)"}),template({data:e,props:t}){const o=x.get(t);let n="";for(let t=0,r=o.length;t<r;t++){const s=t===r-1?0:t+1,[d,i]=o[t],[l,a]=o[s];n+=`<line x1="${d}" y1="${i}" x2="${l}" y2="${a}" \n              stroke-width="${e.strokeWidth}" stroke="${e.stroke}" data-index="${t}"></line>`}return`<g>${n}</g>`},events:()=>[["line","onclick","addPoint"]],methods:({props:e})=>({addPoint(t){t.preventDefault();const{pageX:o,pageY:n,target:r}=t,s=parseInt(r.getAttribute("data-index")),{left:d,top:i}=x.get("svgOffset"),l=x.get(e);l.splice(s+1,0,[o-d,n-i]),x.set(e,l)}}),beforeCreate({render:e,props:t}){x.watch(t,e)}}),O=s({data:()=>({radius:10,fill:"rgba(255, 102, 51)"}),template:({data:{radius:e,fill:t},props:o})=>`<g>${x.get(o).reduce((o,[n,r],s)=>o+=`<circle cx="${n}" cy="${r}" r="${e}" fill="${t}" data-index="${s}"></circle>`,"")}</g>`,events:()=>[["circle","onmousedown","select"],["circle","onmouseup","unselect"],["circle","onmouseleave","unselect"]],methods({props:e}){const t=e=>parseInt(e.getAttribute("data-index"));return{select(o){x.set("selectedPoint",{index:t(o.target),key:e})},unselect(){x.set("selectedPoint",{index:null,key:null})}}},beforeCreate({render:e,props:t}){x.watch(t,e)}}),j=s({data:()=>({fill:"rgba(255, 102, 51, .5)"}),template:({data:{fill:e},props:t})=>`<g>${`<polygon points="${x.get(t).map(e=>e.join(",")).join(" ")}" fill="${e}"></polygon>`}</g>`,beforeCreate({render:e,props:t}){x.watch(t,e)},events:()=>[["polygon","onmousedown","select"],["polygon","onmouseup","unselect"],["polygon","onmouseleave","unselect"]],methods:({props:e})=>({select(){x.set("selectedPolygon",{key:e})},unselect(){x.set("selectedPolygon",{key:null}),x.set("prevCoordinate",null)}})}),S=s({template:()=>`\n      <div>\n        <svg width="500"\n             height="500"\n             xmlns="http://www.w3.org/2000/svg">\n          ${x.get("coordinates").map(e=>`<polygon props="${e}"></polygon>\n      <line props="${e}"></line>\n      <circle props="${e}"></circle>`)}\n        </svg>\n      </div>\n    `,components:()=>[["line",M],["circle",O],["polygon",j]],events:()=>[["svg","onmousemove","onMouseMove"]],methods:({dom:e})=>(setTimeout(()=>{x.set("svgOffset",e.getBoundingClientRect())}),{onMouseMove(e){const{pageX:t,pageY:o}=e;(({pageX:e,pageY:t})=>{const{left:o,top:n}=x.get("svgOffset"),r=e-o,s=t-n;switch(!0){case(e=>"number"==typeof e)(x.get("selectedPoint").index):P({x:r,y:s});break;case(e=>"string"==typeof e)(x.get("selectedPolygon").key):C({x:r,y:s})}})({pageX:t,pageY:o})}}),beforeCreate({render:e}){x.watch("coordinates",e)}}),I=s({template:()=>'<div>\n      <todo-list></todo-list>\n      <sketchbook></sketchbook>\n      <input type="button" value="Add">\n    </div>',events:()=>[['input[type="button"]',"onclick","onClick"]],methods:()=>({onClick(){const e=`coordinate${(()=>parseInt(1e6*Math.random()))()}`,t=x.get("coordinates");x.set(e,[[100,100],[100,400],[400,400],[400,100]]),t.push(e),x.set("coordinates",t)}}),components:()=>[["todo-list",w],["sketchbook",S]]});window.onload=()=>{u("#container")[0].appendChild(I())}}]);